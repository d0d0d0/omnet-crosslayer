//
// Generated file, do not edit! Created by nedtool 5.1 from Message/CrossLayerMsg.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_CROSSLAYERMSG_M_H
#define __INET_CROSSLAYERMSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/common/INETDefs.h"
#include "inet/networklayer/common/L3Address.h"
#include "inet/networklayer/ipv4/IPv4InterfaceData.h"
#include "inet/linklayer/common/MACAddress.h"
#include "inet/linklayer/ideal/IdealMacFrame_m.h"
#include "inet/routing/aodv/AODVControlPackets_m.h"
#include <vector>
// }}


namespace inet {

/**
 * Enum generated from <tt>Message/CrossLayerMsg.msg:45</tt> by nedtool.
 * <pre>
 * enum CLType
 * {
 * 
 *     GENERAL = -1;
 *     CROSS_LAYER_BASE = 0;
 *     CROSS_LAYER_PHY = 1;
 *     CROSS_LAYER_LINK = 2;
 *     CROSS_LAYER_NET = 3;
 *     CROSS_LAYER_TRANS = 4;
 *     CROSS_LAYER_APP = 5;
 *     CROSS_LAYER_ENERGY = 6;
 *     CROSS_LAYER_SELF = 7;
 * }
 * </pre>
 */
enum CLType {
    GENERAL = -1,
    CROSS_LAYER_BASE = 0,
    CROSS_LAYER_PHY = 1,
    CROSS_LAYER_LINK = 2,
    CROSS_LAYER_NET = 3,
    CROSS_LAYER_TRANS = 4,
    CROSS_LAYER_APP = 5,
    CROSS_LAYER_ENERGY = 6,
    CROSS_LAYER_SELF = 7
};

/**
 * Enum generated from <tt>Message/CrossLayerMsg.msg:58</tt> by nedtool.
 * <pre>
 * enum NetType
 * {
 * 
 *     NET_GET_SELF = 0;
 * }
 * </pre>
 */
enum NetType {
    NET_GET_SELF = 0
};

/**
 * Enum generated from <tt>Message/CrossLayerMsg.msg:63</tt> by nedtool.
 * <pre>
 * enum TransType
 * {
 * 
 *     TRANS_GET_SELF = 0;
 * }
 * </pre>
 */
enum TransType {
    TRANS_GET_SELF = 0
};

/**
 * Enum generated from <tt>Message/CrossLayerMsg.msg:68</tt> by nedtool.
 * <pre>
 * enum LinkType
 * {
 * 
 *     LINK_GET_SELF = 0;
 * }
 * </pre>
 */
enum LinkType {
    LINK_GET_SELF = 0
};

/**
 * Enum generated from <tt>Message/CrossLayerMsg.msg:73</tt> by nedtool.
 * <pre>
 * enum PhyType
 * {
 * 
 *     PHY_GET_SELF = 0;
 * }
 * </pre>
 */
enum PhyType {
    PHY_GET_SELF = 0
};

/**
 * Enum generated from <tt>Message/CrossLayerMsg.msg:78</tt> by nedtool.
 * <pre>
 * enum AppType
 * {
 * 
 *     APP_GET_SELF = 0;
 * }
 * </pre>
 */
enum AppType {
    APP_GET_SELF = 0
};

/**
 * Enum generated from <tt>Message/CrossLayerMsg.msg:83</tt> by nedtool.
 * <pre>
 * enum CrossType
 * {
 * 
 *     CHECK_TICK = 0;
 * }
 * </pre>
 */
enum CrossType {
    CHECK_TICK = 0
};

/**
 * Class generated from <tt>Message/CrossLayerMsg.msg:87</tt> by nedtool.
 * <pre>
 * packet CrossLayerMsg
 * {
 *     int type \@enum(CLType);
 *     string desc;
 * }
 * </pre>
 */
class CrossLayerMsg : public ::omnetpp::cPacket
{
  protected:
    int type;
    ::omnetpp::opp_string desc;

  private:
    void copy(const CrossLayerMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CrossLayerMsg&);

  public:
    CrossLayerMsg(const char *name=nullptr, short kind=0);
    CrossLayerMsg(const CrossLayerMsg& other);
    virtual ~CrossLayerMsg();
    CrossLayerMsg& operator=(const CrossLayerMsg& other);
    virtual CrossLayerMsg *dup() const override {return new CrossLayerMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual const char * getDesc() const;
    virtual void setDesc(const char * desc);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CrossLayerMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CrossLayerMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message/CrossLayerMsg.msg:92</tt> by nedtool.
 * <pre>
 * packet CrossPhyMsg extends CrossLayerMsg
 * {
 *     type = CROSS_LAYER_PHY;
 *     desc = "$$$ CROSS_LAYER_PHY generated by msg definition $$$";
 *     int m_type \@enum(PhyType) = -1;
 * }
 * </pre>
 */
class CrossPhyMsg : public ::inet::CrossLayerMsg
{
  protected:
    int m_type;

  private:
    void copy(const CrossPhyMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CrossPhyMsg&);

  public:
    CrossPhyMsg(const char *name=nullptr, short kind=0);
    CrossPhyMsg(const CrossPhyMsg& other);
    virtual ~CrossPhyMsg();
    CrossPhyMsg& operator=(const CrossPhyMsg& other);
    virtual CrossPhyMsg *dup() const override {return new CrossPhyMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getM_type() const;
    virtual void setM_type(int m_type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CrossPhyMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CrossPhyMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message/CrossLayerMsg.msg:98</tt> by nedtool.
 * <pre>
 * packet CrossLinkMsg extends CrossLayerMsg
 * {
 *     type = CROSS_LAYER_LINK;
 *     desc = "$$$ CROSS_LAYER_LINK generated by msg definition $$$";
 *     int m_type \@enum(LinkType) = -1;
 * }
 * </pre>
 */
class CrossLinkMsg : public ::inet::CrossLayerMsg
{
  protected:
    int m_type;

  private:
    void copy(const CrossLinkMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CrossLinkMsg&);

  public:
    CrossLinkMsg(const char *name=nullptr, short kind=0);
    CrossLinkMsg(const CrossLinkMsg& other);
    virtual ~CrossLinkMsg();
    CrossLinkMsg& operator=(const CrossLinkMsg& other);
    virtual CrossLinkMsg *dup() const override {return new CrossLinkMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getM_type() const;
    virtual void setM_type(int m_type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CrossLinkMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CrossLinkMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message/CrossLayerMsg.msg:104</tt> by nedtool.
 * <pre>
 * packet CrossNetMsg extends CrossLayerMsg
 * {
 *     type = CROSS_LAYER_NET;
 *     desc = "$$$ CROSS_LAYER_NET generated by msg definition $$$";
 *     int m_type \@enum(NetType) = -1;
 * }
 * </pre>
 */
class CrossNetMsg : public ::inet::CrossLayerMsg
{
  protected:
    int m_type;

  private:
    void copy(const CrossNetMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CrossNetMsg&);

  public:
    CrossNetMsg(const char *name=nullptr, short kind=0);
    CrossNetMsg(const CrossNetMsg& other);
    virtual ~CrossNetMsg();
    CrossNetMsg& operator=(const CrossNetMsg& other);
    virtual CrossNetMsg *dup() const override {return new CrossNetMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getM_type() const;
    virtual void setM_type(int m_type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CrossNetMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CrossNetMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message/CrossLayerMsg.msg:110</tt> by nedtool.
 * <pre>
 * packet CrossTransMsg extends CrossLayerMsg
 * {
 *     type = CROSS_LAYER_TRANS;
 *     desc = "$$$ CROSS_LAYER_TRANS generated by msg definition $$$";
 *     int m_type \@enum(TransType) = -1;
 * }
 * </pre>
 */
class CrossTransMsg : public ::inet::CrossLayerMsg
{
  protected:
    int m_type;

  private:
    void copy(const CrossTransMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CrossTransMsg&);

  public:
    CrossTransMsg(const char *name=nullptr, short kind=0);
    CrossTransMsg(const CrossTransMsg& other);
    virtual ~CrossTransMsg();
    CrossTransMsg& operator=(const CrossTransMsg& other);
    virtual CrossTransMsg *dup() const override {return new CrossTransMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getM_type() const;
    virtual void setM_type(int m_type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CrossTransMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CrossTransMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message/CrossLayerMsg.msg:116</tt> by nedtool.
 * <pre>
 * packet CrossAppMsg extends CrossLayerMsg
 * {
 *     type = CROSS_LAYER_APP;
 *     desc = "$$$ CROSS_LAYER_APP generated by msg definition $$$";
 *     int m_type \@enum(AppType) = -1;
 * }
 * </pre>
 */
class CrossAppMsg : public ::inet::CrossLayerMsg
{
  protected:
    int m_type;

  private:
    void copy(const CrossAppMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CrossAppMsg&);

  public:
    CrossAppMsg(const char *name=nullptr, short kind=0);
    CrossAppMsg(const CrossAppMsg& other);
    virtual ~CrossAppMsg();
    CrossAppMsg& operator=(const CrossAppMsg& other);
    virtual CrossAppMsg *dup() const override {return new CrossAppMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getM_type() const;
    virtual void setM_type(int m_type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CrossAppMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CrossAppMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message/CrossLayerMsg.msg:122</tt> by nedtool.
 * <pre>
 * packet CrossSelfMsg extends CrossLayerMsg
 * {
 *     type = CROSS_LAYER_SELF;
 *     desc = "$$$ CROSS_LAYER_SELF generated by msg definition $$$";
 *     int m_type \@enum(CrossType) = -1;
 * }
 * </pre>
 */
class CrossSelfMsg : public ::inet::CrossLayerMsg
{
  protected:
    int m_type;

  private:
    void copy(const CrossSelfMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CrossSelfMsg&);

  public:
    CrossSelfMsg(const char *name=nullptr, short kind=0);
    CrossSelfMsg(const CrossSelfMsg& other);
    virtual ~CrossSelfMsg();
    CrossSelfMsg& operator=(const CrossSelfMsg& other);
    virtual CrossSelfMsg *dup() const override {return new CrossSelfMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getM_type() const;
    virtual void setM_type(int m_type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CrossSelfMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CrossSelfMsg& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_CROSSLAYERMSG_M_H

